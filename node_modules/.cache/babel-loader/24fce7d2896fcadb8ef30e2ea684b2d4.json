{"ast":null,"code":"import _slicedToArray from\"/home/sbneelu/Programming/ppq-tracker/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{Line}from\"react-chartjs-2\";import{Chart,TimeScale,LinearScale,PointElement,LineElement,Legend,Tooltip}from\"chart.js\";import\"chartjs-adapter-moment\";import{jsx as _jsx}from\"react/jsx-runtime\";function attemptsToGraphData(attempts){if(attempts.length===0)return[[],[],[]];var dateCounts={};for(var i=0;i<attempts.length;i++){if(!(attempts[i].date in dateCounts))dateCounts[attempts[i].date]=[0,0];dateCounts[attempts[i].date][0]++;dateCounts[attempts[i].date][1]+=attempts[i].mark;}var dateCountsArray=Object.entries(dateCounts).map(function(_ref){var _ref2=_slicedToArray(_ref,2),date=_ref2[0],_ref2$=_slicedToArray(_ref2[1],2),count=_ref2$[0],totalMarks=_ref2$[1];return[new Date(date),count,totalMarks/count];});var labels=dateCountsArray.map(function(e){return e[0];});var count=dateCountsArray.map(function(e){return e[1];});var averageMark=dateCountsArray.map(function(e){return e[2];});return[labels,count,averageMark];}var Graph=function Graph(_ref3){var graphData=_ref3.graphData;var _graphData=_slicedToArray(graphData,3),labels=_graphData[0],count=_graphData[1],averageMarks=_graphData[2];Chart.register(TimeScale,LinearScale,PointElement,LineElement,Legend,Tooltip);return/*#__PURE__*/_jsx(Line,{data:{labels:labels,datasets:[{yAxisID:\"yCount\",label:\"No. of questions\",data:count,backgroundColor:\"darkorange\",borderColor:\"darkorange\",tension:0.2},{yAxisID:\"yMarks\",label:\"Avg. mark\",data:averageMarks,backgroundColor:\"deepskyblue\",borderColor:\"deepskyblue\",tension:0.2}]},options:{scales:{x:{type:\"time\",time:{unit:\"day\"}},yCount:{title:{text:\"No. of questions\",display:true},grid:{display:false},min:0},yMarks:{min:0,max:20,title:{text:\"Avg. mark\",display:true},grid:{display:false},position:\"right\"}},maintainAspectRatio:false,plugins:{legend:{display:true},tooltip:{enabled:true,displayColors:true}}}});};export{attemptsToGraphData};export default Graph;","map":{"version":3,"sources":["/home/sbneelu/Programming/ppq-tracker/src/components/Graph/Graph.tsx"],"names":["Line","Chart","TimeScale","LinearScale","PointElement","LineElement","Legend","Tooltip","attemptsToGraphData","attempts","length","dateCounts","i","date","mark","dateCountsArray","Object","entries","map","count","totalMarks","Date","labels","e","averageMark","Graph","graphData","averageMarks","register","datasets","yAxisID","label","data","backgroundColor","borderColor","tension","scales","x","type","time","unit","yCount","title","text","display","grid","min","yMarks","max","position","maintainAspectRatio","plugins","legend","tooltip","enabled","displayColors"],"mappings":"2HACA,OAASA,IAAT,KAAqB,iBAArB,CACA,OACIC,KADJ,CAEIC,SAFJ,CAGIC,WAHJ,CAIIC,YAJJ,CAKIC,WALJ,CAMIC,MANJ,CAOIC,OAPJ,KAQO,UARP,CASA,MAAO,wBAAP,C,2CAUA,QAASC,CAAAA,mBAAT,CAA6BC,QAA7B,CAAqE,CACjE,GAAIA,QAAQ,CAACC,MAAT,GAAoB,CAAxB,CAA2B,MAAO,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAP,CAC3B,GAAMC,CAAAA,UAAgD,CAAG,EAAzD,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,QAAQ,CAACC,MAA7B,CAAqCE,CAAC,EAAtC,CAA0C,CACtC,GAAI,EAAEH,QAAQ,CAACG,CAAD,CAAR,CAAYC,IAAZ,GAAoBF,CAAAA,UAAtB,CAAJ,CACIA,UAAU,CAACF,QAAQ,CAACG,CAAD,CAAR,CAAYC,IAAb,CAAV,CAA+B,CAAC,CAAD,CAAI,CAAJ,CAA/B,CACJF,UAAU,CAACF,QAAQ,CAACG,CAAD,CAAR,CAAYC,IAAb,CAAV,CAA6B,CAA7B,IACAF,UAAU,CAACF,QAAQ,CAACG,CAAD,CAAR,CAAYC,IAAb,CAAV,CAA6B,CAA7B,GAAmCJ,QAAQ,CAACG,CAAD,CAAR,CAAYE,IAA/C,CACH,CAED,GAAIC,CAAAA,eAAyC,CAAGC,MAAM,CAACC,OAAP,CAC5CN,UAD4C,EAE9CO,GAF8C,CAE1C,gDAAEL,IAAF,4CAASM,KAAT,WAAgBC,UAAhB,iBAAiC,CACnC,GAAIC,CAAAA,IAAJ,CAASR,IAAT,CADmC,CAEnCM,KAFmC,CAGnCC,UAAU,CAAGD,KAHsB,CAAjC,EAF0C,CAAhD,CAQA,GAAMG,CAAAA,MAAM,CAAGP,eAAe,CAACG,GAAhB,CAAoB,SAACK,CAAD,QAAOA,CAAAA,CAAC,CAAC,CAAD,CAAR,EAApB,CAAf,CACA,GAAMJ,CAAAA,KAAK,CAAGJ,eAAe,CAACG,GAAhB,CAAoB,SAACK,CAAD,QAAOA,CAAAA,CAAC,CAAC,CAAD,CAAR,EAApB,CAAd,CACA,GAAMC,CAAAA,WAAW,CAAGT,eAAe,CAACG,GAAhB,CAAoB,SAACK,CAAD,QAAOA,CAAAA,CAAC,CAAC,CAAD,CAAR,EAApB,CAApB,CACA,MAAO,CAACD,MAAD,CAASH,KAAT,CAAgBK,WAAhB,CAAP,CACH,CAED,GAAMC,CAAAA,KAAqB,CAAG,QAAxBA,CAAAA,KAAwB,OAAmB,IAAhBC,CAAAA,SAAgB,OAAhBA,SAAgB,CAC7C,8BAAsCA,SAAtC,IAAOJ,MAAP,eAAeH,KAAf,eAAsBQ,YAAtB,eACA1B,KAAK,CAAC2B,QAAN,CACI1B,SADJ,CAEIC,WAFJ,CAGIC,YAHJ,CAIIC,WAJJ,CAKIC,MALJ,CAMIC,OANJ,EAQA,mBACI,KAAC,IAAD,EACI,IAAI,CAAE,CACFe,MAAM,CAANA,MADE,CAEFO,QAAQ,CAAE,CACN,CACIC,OAAO,CAAE,QADb,CAEIC,KAAK,CAAE,kBAFX,CAGIC,IAAI,CAAEb,KAHV,CAIIc,eAAe,CAAE,YAJrB,CAKIC,WAAW,CAAE,YALjB,CAMIC,OAAO,CAAE,GANb,CADM,CASN,CACIL,OAAO,CAAE,QADb,CAEIC,KAAK,CAAE,WAFX,CAGIC,IAAI,CAAEL,YAHV,CAIIM,eAAe,CAAE,aAJrB,CAKIC,WAAW,CAAE,aALjB,CAMIC,OAAO,CAAE,GANb,CATM,CAFR,CADV,CAsBI,OAAO,CAAE,CACLC,MAAM,CAAE,CACJC,CAAC,CAAE,CACCC,IAAI,CAAE,MADP,CAECC,IAAI,CAAE,CACFC,IAAI,CAAE,KADJ,CAFP,CADC,CAOJC,MAAM,CAAE,CACJC,KAAK,CAAE,CACHC,IAAI,CAAE,kBADH,CAEHC,OAAO,CAAE,IAFN,CADH,CAKJC,IAAI,CAAE,CAAED,OAAO,CAAE,KAAX,CALF,CAMJE,GAAG,CAAE,CAND,CAPJ,CAeJC,MAAM,CAAE,CACJD,GAAG,CAAE,CADD,CAEJE,GAAG,CAAE,EAFD,CAGJN,KAAK,CAAE,CACHC,IAAI,CAAE,WADH,CAEHC,OAAO,CAAE,IAFN,CAHH,CAOJC,IAAI,CAAE,CAAED,OAAO,CAAE,KAAX,CAPF,CAQJK,QAAQ,CAAE,OARN,CAfJ,CADH,CA2BLC,mBAAmB,CAAE,KA3BhB,CA4BLC,OAAO,CAAE,CACLC,MAAM,CAAE,CACJR,OAAO,CAAE,IADL,CADH,CAILS,OAAO,CAAE,CACLC,OAAO,CAAE,IADJ,CAELC,aAAa,CAAE,IAFV,CAJJ,CA5BJ,CAtBb,EADJ,CA+DH,CAzED,CA4EA,OAAS/C,mBAAT,EACA,cAAeiB,CAAAA,KAAf","sourcesContent":["import { FC } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n    Chart,\n    TimeScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Legend,\n    Tooltip,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\n\nimport { QuestionAttempt } from \"../../utils/utils\";\n\ntype GraphData = [Date[], number[], number[]];\n\ninterface GraphProps {\n    graphData: GraphData;\n}\n\nfunction attemptsToGraphData(attempts: QuestionAttempt[]): GraphData {\n    if (attempts.length === 0) return [[], [], []];\n    const dateCounts: { [date: string]: [number, number] } = {};\n    for (let i = 0; i < attempts.length; i++) {\n        if (!(attempts[i].date in dateCounts))\n            dateCounts[attempts[i].date] = [0, 0];\n        dateCounts[attempts[i].date][0]++;\n        dateCounts[attempts[i].date][1] += attempts[i].mark;\n    }\n\n    let dateCountsArray: [Date, number, number][] = Object.entries(\n        dateCounts\n    ).map(([date, [count, totalMarks]]) => [\n        new Date(date),\n        count,\n        totalMarks / count,\n    ]);\n\n    const labels = dateCountsArray.map((e) => e[0]);\n    const count = dateCountsArray.map((e) => e[1]);\n    const averageMark = dateCountsArray.map((e) => e[2]);\n    return [labels, count, averageMark];\n}\n\nconst Graph: FC<GraphProps> = ({ graphData }) => {\n    const [labels, count, averageMarks] = graphData;\n    Chart.register(\n        TimeScale,\n        LinearScale,\n        PointElement,\n        LineElement,\n        Legend,\n        Tooltip\n    );\n    return (\n        <Line\n            data={{\n                labels,\n                datasets: [\n                    {\n                        yAxisID: \"yCount\",\n                        label: \"No. of questions\",\n                        data: count,\n                        backgroundColor: \"darkorange\",\n                        borderColor: \"darkorange\",\n                        tension: 0.2,\n                    },\n                    {\n                        yAxisID: \"yMarks\",\n                        label: \"Avg. mark\",\n                        data: averageMarks,\n                        backgroundColor: \"deepskyblue\",\n                        borderColor: \"deepskyblue\",\n                        tension: 0.2,\n                    },\n                ],\n            }}\n            options={{\n                scales: {\n                    x: {\n                        type: \"time\",\n                        time: {\n                            unit: \"day\",\n                        },\n                    },\n                    yCount: {\n                        title: {\n                            text: \"No. of questions\",\n                            display: true,\n                        },\n                        grid: { display: false },\n                        min: 0,\n                    },\n                    yMarks: {\n                        min: 0,\n                        max: 20,\n                        title: {\n                            text: \"Avg. mark\",\n                            display: true,\n                        },\n                        grid: { display: false },\n                        position: \"right\",\n                    },\n                },\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true,\n                    },\n                    tooltip: {\n                        enabled: true,\n                        displayColors: true,\n                    },\n                },\n            }}\n        />\n    );\n};\n\nexport type { GraphData };\nexport { attemptsToGraphData };\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}